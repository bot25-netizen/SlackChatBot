## ABCI 利用ガイド：基本コマンドと仮想環境構築 🖥️
このガイドは、ABCIスーパーコンピュータを利用する上での基本的なコマンドと、Python仮想環境の構築手順をまとめたものです。

## システム状況の確認
計算資源を確保する前に、まずは以下のコマンドでABCIの状況を確認しましょう。

混雑状況の確認:
qstat -g c
実行結果のAVAIL/TOTALの比率で、現在の混雑具合を把握できます。

ディスク容量の確認:
show_quota
ホームディレクトリなどのディスク使用量と上限を確認できます。

残存ポイントの確認:
show_point
利用可能な計算ポイントの残量を確認できます。

## Python仮想環境の構築手順
ABCI上でPythonを使った開発・実験を行うための、クリーンな仮想環境を構築する手順です。

STEP 1: 計算ノードの確保
まず、インタラクティブジョブとしてGPUノードを確保します。

# 例: smallサイズのGPUノードを1つ、1時間確保する場合
qrsh -g <あなたのグループ名> -l rt_G.small=1 -l h_rt=1:00:00
STEP 2: 必須モジュールのロード
次に、開発に必要なコンパイラやライブラリ（Python, CUDAなど）をロードします。

# 使用可能なモジュールは module avail で確認可能
# 2023/04/12時点の推奨例
module load gcc/12.2.0 python/3.11/3.11.2 cuda/11.7/11.7.1
※ moduleのバージョンは変更される可能性があるため、公式サイトなども適宜確認してください。

STEP 3: 仮想環境の作成と有効化
確保したノード上でPythonのvenv機能を使い、仮想環境を作成・有効化します。

# 1. 仮想環境を作成 (パスと名前は任意)
python3 -m venv ~/venv/my-project

# 2. 作成した仮想環境に入る
source ~/venv/my-project/bin/activate
コマンドラインの先頭に(my-project)のように仮想環境名が表示されれば、有効化は成功です。

STEP 4: パッケージのインストールと環境の終了
有効化した環境内で、必要なPythonパッケージをpipでインストールします。

# requirements.txt ファイルから一括インストールする場合
pip install -r requirements.txt

# 作業が完了したら、仮想環境から抜ける
deactivate
