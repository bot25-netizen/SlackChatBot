Gitの使い方について
[*** 概要]
Gitの使い方についてのまとめです。
最低限の内容なので、より詳しく知りたい場合は、自身で調べてみると良いです。

[*** 内容]

[** Gitとは]
Gitは[* バージョン管理]のためのツールです。

また、[GitHub https://github.com]や[GitLab http://gitlab.com/]などのWebサービスのリポジトリと合わせて使うと、複数人で作業をする場合は勿論、個人で作業する場合のバージョン管理にも便利です。複数環境で作業する場合やソースコードの管理にも便利です。
GitHubやGitLabのソースコードを公開しておけば、ポートフォリオとしても利用できるので、良いコードはぜひ公開してみて下さい。

完全に余談ですが、自作のPythonパッケージを作成し、GitHubなどに登録し、
code:terminal
 pip install git+[PythonパッケージのあるリポジトリのURL]
などとすることで、どこでも直ぐに自作モジュールを利用できるようにもできます。

[** 下準備]
以降では、Unix系の環境でGitHubを利用することを想定しています。GitHubのアカウントは作成してあり、ログインしている前提で話を進めます。

また、サーバなどで、共有のアカウントを用いている場合にはGitは使わないようにした方が良いです。特に公開鍵・秘密鍵の作成や、Gitの設定などは行わないでください。コードをローカルに持ってくるために`git pull`ぐらいなら問題はないと思います。
アカウントが利用者ごとに違う場合は大丈夫です。

1. 公開鍵・秘密鍵を作成する
GitHubなどを利用するためには、ssh通信を行う必要があるので、そこで利用する公開鍵・秘密鍵を作成する必要があります。
基本的に公開鍵・秘密鍵は`~/.ssh`以下に保存します。
ここでは、鍵の方式としてRSAを用いています。
code:terminal
 mkdir ~/.ssh
 cd ~/.ssh
 ssh-keygen -t rsa
以上のコマンドを打つと、いくつか質問が表示されますが、Enterを押していけば大丈夫です。パスフレーズを設定したい場合は質問の途中で設定して下さい。
全て完了すると、秘密鍵の`id_rsa`と公開鍵の`id_rsa.pub`が生成されます。公開鍵の`.pub`はpublicなので、覚えておくとどっちが公開鍵か忘れないと思います。

2. 公開鍵をリポジトリに登録する
以下のコマンドを入力すると、クリップボードに公開鍵がコピーされます。
pbcopyがない場合は、`cat`コマンドでターミナルに公開鍵を表示させ、直接コピーして下さい。
code:terminal
 cat ~/.ssh/id_rsa.pub | pbcopy
以下のリンクに飛び、「Add SSH key」ボタンを押します。
https://github.com/settings/ssh
すると、「Title」と「Key」を入力する場所があるので、コピーした鍵を「Key」にペーストします。「Title」は好きに命名してもらって大丈夫です。
個人的には、どの端末の鍵かがわかるようにしておくと良いと思います。
「Key type」はそのままで大丈夫です。
「Add SSH key」を押すと、鍵の登録完了です。

以下のコマンドで接続がうまくいけば、問題なく鍵が登録できていることがわかります。
code:terminal
 ssh -T git@github.com

3. Gitの初期設定
GitHubなどで空のリポジトリを作成したとき、以下のようなコマンドを打つように言われますので、各自の設定に応じた内容を打ちましょう。言われたものをコピペすれば大丈夫です。
code:terminal
 git config --global user.name "<ユーザ名>"
 git config --global user.email "<メールアドレス>"
この設定は、`~/.gitconfig`を見ると確認できます。

打ち終わったら、以降は新たなリポジトリを作成した場合にもこのコマンドを打つ必要はありません。新しい環境で作業するようになった場合には打つと良いでしょう。

リポジトリの画面には以上のコマンド以外にも状況に応じた利用法が載っているので、最初にリポジトリにpushする場合にはコピペで大丈夫です。

[** Gitの使い方]
ここでは基本的なことのみ記載します。
それ以上のことが知りたければ、以下のサイトを見たり、ご自身で調べてみて下さい。
https://qiita.com/uhooi/items/c26c7c1beb5b36e7418e

Gitの作業フォルダを指定するには、`git init`打つ必要がありますが、最初にGitHubの空のリポジトリに何かローカルの内容をpushしていれば既にコマンドを打っているはずです。
`.git`というフォルダがあるディレクトリが`git init`を打ったディレクトリであり、Gitの監視下に置かれている一番上のディレクトリとなります。つまり、これより上のディレクトリはGitの監視対象外となっているということです。

Gitのコマンドは一人で使う分には、コマンドは`git add`、`git commit`、`git push`、`git clone`、`git pull`のみ覚えていれば普段利用する分には問題はありません。
ローカルの変更をリポジトリに反映させる手順としては、以下の3つの手順を踏みます。
1. `git add`で監視対象のファイルを指定する
2. `git commit`で監視対象のファイルの変更をあるバージョンとして保存する
3. `git push`でローカルリポジトリ(作業している端末)の内容をリモートリポジトリ(GitHubなど)に反映する

コマンドの記法は以下の通りです。
code:terminal
 git add .
 git commit -m "コミットメッセージ"
 git push origin main
`git add`の後には、監視対象のファイル名を直接指定することもできますが、ディレクトリも指定可能です。ディレクトリを指定した場合は、指定したディレクトリ以下が監視対象となります。なので、`.git`があるディレクトリで`git add .`を打つと、全てのファイルが監視対象となります。基本的にはこの使い方で大丈夫です。

`git commit`には、コミットメッセージをつける必要があります。メンバと開発する場合には、コミットメッセージをルール化したりしますが、個人で使う分には、自分がどういった意図でcommitしたのかがわかりやすければいいと思います。

`git push`では、ブランチ名を指定して、そのブランチに変更内容を反映させます。`origin`というのは、リモートリポジトリのデフォルトの名前なので、ここは変える必要はないです。また、一番最初に作成されるブランチがmainというブランチなので、ここも個人で使う分には変える必要はないです。別のブランチにpushする場合には変更すると良いです。
余談ですが、少し前は、mainではなく、masterという名前でブランチが作成されていたので、それを踏まえると、Gitの解説記事などでの混乱が少ないと思います。

また、新たな環境、別のディレクトリなどでリモートリポジトリからローカルリポジトリに持ってきたい場合には、`git clone`を用います。
リモートリポジトリの「code」というボタンを押し、「SSH」のタブを選択すると、URLをコピーできます。そのURLを用いて、プロジェクトを持ってきたいディレクトリで以下のようにコマンドを打ちます。
code:terminal
 git clone <コピーしたURL>
すると、リモートリポジトリからローカルにデータを持ってくることができます。以降、リモートリポジトリの内容だけをローカルリポジトリに反映させたい場合は以下のように`git pull`を用います。
code:terminal
 git pull

以上の5つのコマンドを覚えていれば、個人で使う分には問題ないと思います。複数人で作業する場合は、ブランチの概念を理解すると良いでしょう。

[** .gitignoreについて]
Gitで作業をしていると、監視対象にしたくないディレクトリやファイルが出てきます(logファイルやキャッシュ、別途ダウンロードする重いファイルなど)。
`.gitignore`ファイルを作成することで、あるファイルやディレクトリを監視対象から外すということができます。

`.gitignore`は一番上(`.git`があるフォルダ)に置いておくと良いですが、複数のフォルダに置くことも出来ます。そして、下の階層の`.gitignore`の方が優先度は高いです。

以下に`.gitignore`の例を示します。
code:.gitignore
 .DS_Store
 __pycache__
 /code/model/
 *.json
 !/code/a.json
`.DS_Store`や`__pycache__`のようにディレクトリ名をそのまま書くと、`.gitignore`があるディレクトリ以下のどのディレクトリに`.DS_Store`や`__pycache__`があっても無視されます。
`/code/model/`のように一番最初に`/`をつけると`.gitignore`があるディレクトリをルートディレクトリに、絶対パスとしてフォルダやファイルを指定して無視します。
`*.json`のようにワイルドカードを指定して無視することも出来ます。
逆に、無視したくないようなファイルやフォルダには、先頭に`!`をつけることで無視しないようにも出来ます。
