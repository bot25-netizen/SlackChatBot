GitとGitHubの基本ガイド 📜
このガイドは，バージョン管理ツールGitと，それを利用したWebサービスGitHubの基本的な使い方をまとめたものです．個人での開発や研究室での共同作業で最低限必要となる知識を網羅しています．

STEP 1: 使い始める前の初期設定
まず，GitとGitHubを利用するための準備を行います．この設定は基本的に最初の一度だけです．

GitHubアカウントの作成
メールアドレス，ユーザー名，パスワードを登録してアカウントを作成します．

SSHキーの作成と登録
お使いのPCからGitHubへ安全に接続するために，SSHキーを設定します．

キーの作成: ターミナルで以下のコマンドを実行し，公開鍵 (id_rsa.pub) と秘密鍵 (id_rsa) を作成します．

コード スニペット

ssh-keygen -t rsa
GitHubへの登録: 作成した公開鍵 (~/.ssh/id_rsa.pub) の中身をコピーし，GitHubの Settings > SSH and GPG keys ページに登録します．

接続確認: 以下のコマンドで接続テストを行い，successfully authenticated と表示されれば成功です．

コード スニペット

ssh -T git@github.com
Gitのユーザー情報設定
コミット履歴に記録する名前とメールアドレスを設定します．

コード スニペット

git config --global user.name "あなたのユーザー名"
git config --global user.email "あなたのメールアドレス"
STEP 2: 基本的なコマンド操作
個人で利用する上で，最低限覚えておきたい5つのコマンドです．

リポジトリの取得・更新
git clone <URL>
GitHub上にあるリポジトリ（プロジェクト）を，自分のPCに丸ごとダウンロードします．リポジトリページの緑色の「Code」ボタンからSSHのURLをコピーして使います．

git pull
リモートリポジトリ（GitHub側）の最新の変更内容を，手元のPCに反映させます．

変更内容の反映（重要✨）
ローカルでの変更をGitHubにアップロードするには，以下の3ステップを踏みます．

git add .
変更したファイルの中から，記録したいファイルを選択（ステージング）します．. を指定すると，カレントディレクトリ以下の全ての変更が対象になります．

git commit -m "コミットメッセージ"
addで選択したファイルの変更内容を，「どのような変更をしたか」というメッセージと共にローカルリポジトリに保存（コミット）します．

git push origin main
ローカルリポジトリに保存した変更履歴を，リモートリポジトリ（GitHub）にアップロードして反映させます．

STEP 3: 共同作業と便利な設定
共同作業者 (Collaborator) の追加
Privateリポジトリで他の人と共同作業を行いたい場合，相手を共同作業者として招待する必要があります．

手順: リポジトリの Settings > Collaborators > Add people から，招待したい人のGitHubユーザー名かメールアドレスを入力します．

権限: 招待されたユーザーは，Privateリポジトリの閲覧やコードの変更 (push) が可能になります．

管理対象外ファイルの設定 (.gitignore)
ログファイルやOSが自動生成するファイル (.DS_Storeなど) のように，バージョン管理に含めたくないファイルは.gitignoreファイルに記述することで無視できます．

書き方の例:

コード スニペット

# OSが自動生成するファイル
.DS_Store

# Pythonのキャッシュファイル
__pycache__/

# .log拡張子のファイルをすべて無視
*.log

# 特定のディレクトリを無視
/data/

# 無視する設定から特定のファイルを除外
!/config/important.json
⚠️ 注意事項
情報の公開範囲: 研究成果など，公開前のコードやデータは必ずリポジトリをPrivate設定にしてください．

共有アカウントでの利用: 複数人で共用するサーバーアカウントでは，個人を特定するSSHキーの設定やgit configは行わないでください．コードのダウンロード (git cloneやgit pull) のみの利用に留めるのが安全です．
