## ローカルリポジトリをGitHubに接続する手順と注意点 🔧
このガイドは、ローカルで作成したGitリポジトリを、GitHub上の新しいリモートリポジトリに接続（push）するための基本的な手順と、その際によく発生する問題の解決策をまとめたものです。

## 基本手順：ローカルからリモートへ最初のPush
ローカルリポジトリの準備 ✅
まず、ローカル環境で作業の準備をします。

# Gitリポジトリを初期化
git init

# ファイルをステージング
git add .

# 変更内容をコミット
git commit -m "最初のコミット"
GitHubで空のリモートリポジトリを作成 ☁️
GitHubのサイト上で、新しいリポジトリを作成します。
❗重要: この時点ではREADMEファイルなどを自動生成するチェックは入れず、空のリポジトリとして作成してください。

ローカルとリモートを接続してPush 🚀
作成したリモートリポジトリのURLを使って、ローカルリポジトリから最初のpushを行います。

# ローカルリポジトリにリモートリポジトリの場所を "origin" として登録
git remote add origin <GitHubリポジトリのURL>

# デフォルトのブランチ名を "main" に変更（近年の標準）
git branch -M main

# "main" ブランチの内容をリモートリポジトリ "origin" にpush
git push -u origin main
これ以降、ローカルでの変更を反映させる際は git push origin main コマンドでOKです。

## トラブルシューティング
pushができない場合
原因1：ブランチ名の違い
以前はデフォルトのブランチ名が master でしたが、現在は main が主流です。git push origin master でエラーが出る場合は、ブランチ名を main に変えて git push origin main を試してください。
原因2：ローカルとリモートの履歴が異なる
GitHub上で先にREADME.mdなどを作成してしまうと、ローカルとリモートの履歴に食い違いが生じ、直接pushできなくなります。

解決策: まずgit pull origin mainを実行してリモートの変更を手元に統合（マージ）してから、再度pushしてください。

ローカルの変更を破棄してリモートに強制的に合わせたい場合
「ローカルでの変更はすべて不要で、とにかくリモートリポジトリの状態に完全に戻したい」という強力な方法です。
⚠️注意: この操作を実行すると、ローカルでのコミットしていない変更はすべて失われます。

# 1. リモートリポジトリの最新情報を取得
git fetch origin

# 2. ローカルの状態を、取得したリモートのmainブランチの状態に強制リセット
git reset --hard origin/main
Permission denied エラーが出る場合
git cloneやgit pushの際にこのエラーが出る場合、SSHの公開鍵がGitHubに正しく登録されていないことがほとんどです。
解決策: ssh-keygenコマンドを実行して新しいSSHキーペアを作成し、生成された公開鍵（id_rsa.pubなどの.pubファイル）の中身をコピーして、GitHubのSettings > SSH and GPG keysに登録してください。
コンテナやクラウド環境の場合: 作業している環境（Dockerコンテナ内など）でssh-keygenを実行し、そこで生成された公開鍵を登録する必要があります。
